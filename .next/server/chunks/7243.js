"use strict";exports.id=7243,exports.ids=[7243],exports.modules={77243:(a,b,c)=>{c.d(b,{K:()=>e,n:()=>d});class d{constructor(){this.token=null,this.baseUrl="https://api.gajkesaristeels.in",this.loadToken()}async checkConnectivity(){try{return(await fetch(`${this.baseUrl}/health`,{method:"GET",headers:{"Content-Type":"application/json"}})).ok}catch(a){return console.error("\uD83C\uDF10 Connectivity check failed:",a),!1}}static async getEmployees(){return e.getAllEmployees()}static async getReportCounts(a,b){return e.getReportCounts(a,b)}static async getAttendanceByDate(a){return e.getAttendanceForRange(a,a)}static async getVisitsByDateSorted(a,b,c=0,d=10,f="visitDate,desc",g){return e.getVisitsByDateSorted(a,b,c,d,f,g)}static async getVisitsForTeam(a,b,c,d=0,f=10,g="visitDate,desc",h,i,j){return e.getVisitsForTeam(a,b,c,d,f,g,h,i,j)}static async createNote(a){return e.createNote(a)}static async getAllNotes(){return e.getAllNotes()}static async getStoresFiltered(a){return e.getStoresFiltered(a)}static async getStoresFilteredPaginated(a){return e.getStoresFilteredPaginated(a)}static async getStoresByEmployee(a,b){return e.getStoresByEmployee(a,b)}static async deleteStore(a){return e.deleteStore(a)}static async exportStores(){return e.exportStores()}static async getAllEmployees(){return e.getAllEmployees()}static async getEmployeeById(a){return e.getEmployeeById(a)}static async getTeamByEmployee(a){return e.getTeamByEmployee(a)}static async getCities(){return e.getCities()}static async getAllInactiveEmployees(){return e.getAllInactiveEmployees()}static async createEmployee(a){return e.createEmployee(a)}static async updateEmployee(a,b){return e.updateEmployee(a,b)}static async deleteEmployee(a){return e.deleteEmployee(a)}static async resetPassword(a,b){return e.resetPassword(a,b)}static async editUsername(a,b){return e.editUsername(a,b)}static async setEmployeeActive(a){return e.setEmployeeActive(a)}static async getEmployeeStatsByDateRange(a,b,c){return e.getEmployeeStatsByDateRange(a,b,c)}static async getEmployeeStatsWithVisits(a,b,c){return e.getEmployeeStatsWithVisits(a,b,c)}static async getEmployeeLiveLocation(a){return e.getEmployeeLiveLocation(a)}static async getAllEmployeeLocations(){return e.getAllEmployeeLocations()}static async createAttendanceLog(a){return e.createAttendanceLog(a)}static async getCurrentUser(){return e.getCurrentUser()}static async getStoresForTeam(a,b=0,c=10){return e.getStoresForTeam(a,b,c)}loadToken(){try{let{cookies:a}=c(82216),b=a();this.token=b.get("authToken")?.value||null}catch(a){this.token=null}}getHeaders(){this.loadToken();let a={"Content-Type":"application/json"};return this.token&&(a.Authorization=`Bearer ${this.token}`),a}async makeRequest(a,b={},c=0){let d=`${this.baseUrl}${a}`,e={...b,headers:{...this.getHeaders(),...b.headers}};console.log("\uD83C\uDF10 Making API request:",{url:d,method:e.method||"GET",headers:e.headers,hasToken:!!this.token});try{let b=await fetch(d,e),c=b.headers.get("content-type")||"";if(!b.ok){let a="";try{if(c.includes("application/json")){let c=await b.json();a="string"==typeof c?c:JSON.stringify(c)}else a=await b.text()}catch{}let d=a?` Body: ${a.slice(0,200)}`:"";throw Error(`API request failed: ${b.status} ${b.statusText}.${d}`)}if(204===b.status)return;if(!c||!c.toLowerCase().includes("application/json")){let e=await b.text();if(["/monthly-sale/getByVisit","/intent-audit/getByVisit","/task/getByVisit","/notes/getByVisit"].some(b=>a.includes(b))&&b.ok)return console.warn(`Non-JSON response from ${a}, returning empty array. Response: ${e.slice(0,200)}`),[];if(["/employee-user/create","/attendance-log/createAttendanceLog"].some(b=>a.includes(b))&&b.ok)return console.log(`Success response from ${a}: ${e}`),{success:!0,message:e};let f=e.slice(0,200);throw Error(`Expected JSON but received '${c||"unknown"}' from ${d}. Body starts with: ${f}`)}return await b.json()}catch(f){if(console.error(`ðŸš¨ API request failed for ${a}:`,f),console.error("\uD83C\uDF10 Request details:",{url:d,method:e.method||"GET",hasToken:!!this.token,tokenPreview:this.token?`${this.token.substring(0,20)}...`:"No token"}),f instanceof TypeError&&"Failed to fetch"===f.message){if(console.error("\uD83C\uDF10 Network Error Details:",{url:d,baseUrl:this.baseUrl,error:f.message,retryCount:c,possibleCauses:["CORS policy blocking the request","API server is down or unreachable","Network connectivity issues","Invalid URL or endpoint","Authentication token expired or invalid"]}),c<2)return console.log(`ðŸ”„ Retrying request (attempt ${c+1}/2)...`),await new Promise(a=>setTimeout(a,1e3*(c+1))),this.makeRequest(a,b,c+1);throw Error(`Network error: Unable to connect to API server at ${this.baseUrl}. This could be due to:
- API server is down or unreachable
- Network connectivity issues
- CORS policy blocking the request
- Authentication token expired

Please check your internet connection and try again.`)}throw f}}async updateEmployeeLiveLocation(a,b,c){return this.makeRequest(`/employee/updateLiveLocation?id=${a}&latitude=${b}&longitude=${c}`,{method:"PUT"})}async getAllVisits(){return this.makeRequest("/visit/getAll")}async getVisitsByEmployee(a){return this.makeRequest(`/visit/getByEmployee?employeeId=${a}`)}async getVisitsByDateRange(a,b){return this.makeRequest(`/visit/getByDateRange?start=${a}&end=${b}`)}async getVisitsByEmployeeAndDateRange(a,b,c){return this.makeRequest(`/visit/getByEmployeeAndDateRange?employeeId=${a}&start=${b}&end=${c}`)}async getEmployeeStatsByDateRange(a,b,c){return this.makeRequest(`/visit/getByDateRangeAndEmployeeStats?id=${a}&start=${b}&end=${c}`)}async getEmployeeStatsWithVisits(a,b,c){return this.getEmployeeStatsByDateRange(a,b,c)}async getVisitsByDateSorted(a,b,c=0,d=10,e="visitDate,desc",f){let g=`/visit/getByDateSorted?startDate=${a}&endDate=${b}&page=${c}&size=${d}&sort=${e}`;return f&&""!==f.trim()&&(g+=`&storeName=${encodeURIComponent(f.trim())}`),console.log("API URL:",`${this.baseUrl}${g}`),this.makeRequest(g)}async getVisitsForTeam(a,b,c,d=0,e=10,f="visitDate,desc",g,h,i){let j=`/visit/getForTeam?teamId=${a}&startDate=${b}&endDate=${c}&page=${d}&size=${e}&sort=${f}`;return g&&""!==g.trim()&&(j+=`&purpose=${encodeURIComponent(g.trim())}`),h&&""!==h.trim()&&(j+=`&priority=${encodeURIComponent(h.trim())}`),i&&""!==i.trim()&&(j+=`&storeName=${encodeURIComponent(i.trim())}`),console.log("Team API URL:",`${this.baseUrl}${j}`),this.makeRequest(j)}async getVisitById(a){return this.makeRequest(`/visit/getById?id=${a}`)}async getVisitProCons(a){return this.makeRequest(`/visit/getProCons?visitId=${a}`)}async addBrandProCons(a,b){return this.makeRequest(`/visit/addProCons?visitId=${a}`,{method:"PUT",body:JSON.stringify(b)})}async deleteBrandProCons(a,b){return this.makeRequest(`/visit/deleteProCons?visitId=${a}`,{method:"POST",body:JSON.stringify(b)})}async getIntentAuditByVisit(a){return this.makeRequest(`/intent-audit/getByVisit?id=${a}`)}async getMonthlySaleByVisit(a){return this.makeRequest(`/monthly-sale/getByVisit?visitId=${a}`)}async getTasksByVisit(a,b){return this.makeRequest(`/task/getByVisit?type=${a}&visitId=${b}`)}async getVisitsByStore(a){return this.makeRequest(`/visit/getByStore?id=${a}`)}async getNotesByStore(a){return this.makeRequest(`/notes/getByStore?id=${a}`)}async getNotesByVisit(a){return this.makeRequest(`/notes/getByVisit?id=${a}`)}async createNote(a){return this.makeRequest("/notes/create",{method:"POST",body:JSON.stringify(a)})}async getAllNotes(){return this.makeRequest("/notes/getAll")}async updateNote(a,b){return this.makeRequest(`/notes/edit?id=${a}`,{method:"PUT",body:JSON.stringify(b)})}async deleteNote(a){return this.makeRequest(`/notes/delete?id=${a}`,{method:"DELETE"})}async getAttendanceForRange(a,b){return this.makeRequest(`/attendance-log/getForRange1?start=${a}&end=${b}`)}async getAttendanceStatsForRange(a,b){return this.makeRequest(`/attendance-log/getForRange?start=${a}&end=${b}`)}async getAttendanceForEmployeeAndRange(a,b,c){return this.makeRequest(`/attendance-log/getForEmployeeAndRange?employeeId=${a}&start=${b}&end=${c}`)}async getReportCounts(a,b){return this.makeRequest(`/report/getCounts?startDate=${a}&endDate=${b}`)}async getExpensesByDateRange(a,b){return this.makeRequest(`/expense/getByDateRange?start=${a}&end=${b}`)}async getStoresFiltered(a){let b=new URLSearchParams;a.storeName&&b.append("storeName",a.storeName),a.ownerName&&b.append("clientName",a.ownerName),a.city&&"all"!==a.city&&b.append("city",a.city),a.state&&"all"!==a.state&&b.append("state",a.state),a.clientType&&"all"!==a.clientType&&b.append("clientType",a.clientType),void 0!==a.page&&b.append("page",a.page.toString()),void 0!==a.size&&b.append("size",a.size.toString());let c=a.sortBy||"storeName",d=a.sortOrder||"asc";return b.append("sortBy",c),b.append("sortOrder",d),(await this.makeRequest(`/store/filteredValues?${b.toString()}`)).content}async getStoresFilteredPaginated(a){let b=new URLSearchParams;if(a.storeName&&b.append("storeName",a.storeName),a.ownerName&&b.append("clientName",a.ownerName),a.city&&b.append("city",a.city),a.state&&b.append("state",a.state),a.clientType&&b.append("clientType",a.clientType),a.employeeName&&b.append("employeeName",a.employeeName),a.primaryContact){let c=a.primaryContact.replace(/\D/g,"");c&&b.append("primaryContact",c)}void 0!==a.page&&b.append("page",a.page.toString()),void 0!==a.size&&b.append("size",a.size.toString());let c=a.sortBy||"storeName",d=a.sortOrder||"asc";return b.append("sort",`${c},${d}`),this.makeRequest(`/store/filteredValues?${b.toString()}`)}async getStoreById(a){return this.makeRequest(`/store/getById?id=${a}`)}async updateStore(a,b){return this.makeRequest(`/store/edit?id=${a}`,{method:"PUT",body:JSON.stringify(b)})}async getStoresByEmployee(a,b){let c=new URLSearchParams;c.append("id",a.toString());let d=b.sortBy||"storeName",e=b.sortOrder||"asc";return c.append("sort",`${d},${e}`),this.makeRequest(`/store/getByEmployeeWithSort?${c.toString()}`)}async deleteStore(a){return this.makeRequest(`/store/deleteById?id=${a}`,{method:"DELETE"})}async exportStores(){let a=await fetch(`${this.baseUrl}/store/export`,{headers:this.getHeaders()});if(!a.ok)throw Error(`Export failed: ${a.status} ${a.statusText}`);return a.text()}async getDashboardData(a,b){let[c,d,e]=await Promise.all([this.getAllEmployees(),this.getVisitsByDateRange(a,b),this.getReportCounts(a,b)]);return{employees:c,visits:d,reportCounts:e}}async getEmployeeDashboardData(a,b,c){let[d,e,f]=await Promise.all([this.getEmployeeById(a),this.getVisitsByEmployeeAndDateRange(a,b,c),this.getAttendanceForEmployeeAndRange(a,b,c)]);return{employee:d,visits:e,attendanceStats:f}}async getAllEmployeeLocations(){return this.makeRequest("/employee/getAllLiveLocations")}async getEmployeeLiveLocation(a){return this.makeRequest(`/employee/getLiveLocation?id=${a}`)}async getTasksByStoreAndDate(a){let{storeId:b,start:c,end:d}=a;return this.makeRequest(`/task/getByStoreAndDate?storeId=${b}&start=${c}&end=${d}`)}async getSitesByStore(a){return this.makeRequest(`/site/getByStore?id=${a}`)}formatDate(a){return a.toISOString().split("T")[0]}formatDateRange(a,b){return{start:this.formatDate(a),end:this.formatDate(b)}}async getAllEmployees(){return this.makeRequest("/employee/getAll")}async getEmployeeById(a){return this.makeRequest(`/employee/getById?id=${a}`)}async getTeamByEmployee(a){return this.makeRequest(`/employee/team/getbyEmployee?id=${a}`)}async getCities(){return this.makeRequest("/employee/getCities")}async getAllInactiveEmployees(){return this.makeRequest("/employee/getAllInactive")}async createEmployee(a){return this.makeRequest("/employee-user/create",{method:"POST",body:JSON.stringify(a)})}async updateEmployee(a,b){return this.makeRequest(`/employee/edit?empId=${a}`,{method:"PUT",body:JSON.stringify(b)})}async deleteEmployee(a){return this.makeRequest(`/employee/delete?id=${a}`,{method:"PUT"})}async resetPassword(a,b){return this.makeRequest("/user/manage/update",{method:"PUT",body:JSON.stringify({username:a,password:b})})}async editUsername(a,b){return this.makeRequest(`/employee/editUsername?id=${a}&username=${b}`,{method:"PUT"})}async setEmployeeActive(a){return this.makeRequest(`/employee/setActive?id=${a}`,{method:"PUT"})}async createAttendanceLog(a){return this.makeRequest(`/attendance-log/createAttendanceLog?employeeId=${a}`,{method:"POST"})}async getCurrentUser(){return this.makeRequest("/user/manage/current-user")}async getStoresForTeam(a,b=0,c=10){return this.makeRequest(`/store/getForTeam?teamId=${a}&page=${b}&size=${c}`)}}let e=new d}};