// This file is generated automatically by Next.js
// Do not edit this file manually

type AppRoutes = "/" | "/dashboard" | "/dashboard/approvals" | "/dashboard/attendance" | "/dashboard/complaints" | "/dashboard/customers" | "/dashboard/customers/[id]" | "/dashboard/employee/[id]" | "/dashboard/employees" | "/dashboard/employees/[id]" | "/dashboard/enquiries" | "/dashboard/expenses" | "/dashboard/live-locations" | "/dashboard/pricing" | "/dashboard/reports" | "/dashboard/reports/monthly-target" | "/dashboard/requirements" | "/dashboard/settings" | "/dashboard/settings/allowance" | "/dashboard/settings/salary" | "/dashboard/settings/target" | "/dashboard/settings/team" | "/dashboard/settings/working-days" | "/dashboard/state/[state]" | "/dashboard/visits" | "/dashboard/visits/[id]" | "/login" | "/test"
type AppRouteHandlerRoutes = "/api/image-proxy" | "/api/proxy/[...path]"
type PageRoutes = never
type LayoutRoutes = "/" | "/dashboard" | "/dashboard/approvals" | "/dashboard/attendance" | "/dashboard/complaints" | "/dashboard/employees" | "/dashboard/enquiries" | "/dashboard/expenses" | "/dashboard/pricing" | "/dashboard/reports" | "/dashboard/requirements" | "/dashboard/settings" | "/dashboard/visits"
type RedirectRoutes = never
type RewriteRoutes = never
type Routes = AppRoutes | PageRoutes | LayoutRoutes | RedirectRoutes | RewriteRoutes | AppRouteHandlerRoutes


interface ParamMap {
  "/": {}
  "/api/image-proxy": {}
  "/api/proxy/[...path]": { "path": string[]; }
  "/dashboard": {}
  "/dashboard/approvals": {}
  "/dashboard/attendance": {}
  "/dashboard/complaints": {}
  "/dashboard/customers": {}
  "/dashboard/customers/[id]": { "id": string; }
  "/dashboard/employee/[id]": { "id": string; }
  "/dashboard/employees": {}
  "/dashboard/employees/[id]": { "id": string; }
  "/dashboard/enquiries": {}
  "/dashboard/expenses": {}
  "/dashboard/live-locations": {}
  "/dashboard/pricing": {}
  "/dashboard/reports": {}
  "/dashboard/reports/monthly-target": {}
  "/dashboard/requirements": {}
  "/dashboard/settings": {}
  "/dashboard/settings/allowance": {}
  "/dashboard/settings/salary": {}
  "/dashboard/settings/target": {}
  "/dashboard/settings/team": {}
  "/dashboard/settings/working-days": {}
  "/dashboard/state/[state]": { "state": string; }
  "/dashboard/visits": {}
  "/dashboard/visits/[id]": { "id": string; }
  "/login": {}
  "/test": {}
}


export type ParamsOf<Route extends Routes> = ParamMap[Route]

interface LayoutSlotMap {
  "/": never
  "/dashboard": never
  "/dashboard/approvals": never
  "/dashboard/attendance": never
  "/dashboard/complaints": never
  "/dashboard/employees": never
  "/dashboard/enquiries": never
  "/dashboard/expenses": never
  "/dashboard/pricing": never
  "/dashboard/reports": never
  "/dashboard/requirements": never
  "/dashboard/settings": never
  "/dashboard/visits": never
}


export type { AppRoutes, PageRoutes, LayoutRoutes, RedirectRoutes, RewriteRoutes, ParamMap, AppRouteHandlerRoutes }

declare global {
  /**
   * Props for Next.js App Router page components
   * @example
   * ```tsx
   * export default function Page(props: PageProps<'/blog/[slug]'>) {
   *   const { slug } = await props.params
   *   return <div>Blog post: {slug}</div>
   * }
   * ```
   */
  interface PageProps<AppRoute extends AppRoutes> {
    params: Promise<ParamMap[AppRoute]>
    searchParams: Promise<Record<string, string | string[] | undefined>>
  }

  /**
   * Props for Next.js App Router layout components
   * @example
   * ```tsx
   * export default function Layout(props: LayoutProps<'/dashboard'>) {
   *   return <div>{props.children}</div>
   * }
   * ```
   */
  type LayoutProps<LayoutRoute extends LayoutRoutes> = {
    params: Promise<ParamMap[LayoutRoute]>
    children: React.ReactNode
  } & {
    [K in LayoutSlotMap[LayoutRoute]]: React.ReactNode
  }

  /**
   * Context for Next.js App Router route handlers
   * @example
   * ```tsx
   * export async function GET(request: NextRequest, context: RouteContext<'/api/users/[id]'>) {
   *   const { id } = await context.params
   *   return Response.json({ id })
   * }
   * ```
   */
  interface RouteContext<AppRouteHandlerRoute extends AppRouteHandlerRoutes> {
    params: Promise<ParamMap[AppRouteHandlerRoute]>
  }
}
